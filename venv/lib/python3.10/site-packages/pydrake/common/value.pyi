import numpy
import pydrake.autodiffutils
import pydrake.common.eigen_geometry
import pydrake.geometry
import pydrake.geometry.optimization
import pydrake.math
import pydrake.multibody.math
import pydrake.multibody.optimization
import pydrake.multibody.plant
import pydrake.multibody.tree
import pydrake.perception
import pydrake.solvers
import pydrake.symbolic
import pydrake.systems.framework
import pydrake.systems.sensors
from pydrake.common.cpp_param import List as List
from pydrake.common.cpp_template import Value as Value
from typing import Any, Callable, ClassVar, overload

class AbstractValue:
    Make: ClassVar[Callable] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Clone(self) -> AbstractValue: ...
    def SetFrom(self, arg0: AbstractValue) -> None: ...
    def get_mutable_value(self, *args, **kwargs) -> None: ...
    def get_value(self, *args, **kwargs) -> None: ...
    def set_value(self, *args, **kwargs) -> None: ...
    def __copy__(self) -> AbstractValue: ...
    def __deepcopy__(self, arg0: dict) -> AbstractValue: ...

class Value𝓣AbstractParameterIndex𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.AbstractParameterIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.AbstractParameterIndex: ...
    def get_value(self) -> pydrake.systems.framework.AbstractParameterIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.AbstractParameterIndex) -> None: ...

class Value𝓣AbstractStateIndex𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.AbstractStateIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.AbstractStateIndex: ...
    def get_value(self) -> pydrake.systems.framework.AbstractStateIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.AbstractStateIndex) -> None: ...

class Value𝓣BasicVector_𝓣AutoDiffXd𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.BasicVector_TAutoDiffXdU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.BasicVector_TAutoDiffXdU: ...
    def get_value(self) -> pydrake.systems.framework.BasicVector_TAutoDiffXdU: ...
    @overload
    def set_value(self, arg0: pydrake.systems.framework.BasicVector_TAutoDiffXdU) -> None: ...
    @overload
    def set_value(self, value: pydrake.autodiffutils.AutoDiffXd) -> None: ...
    @overload
    def set_value(self, value: numpy.ndarray[object[m, 1]]) -> None: ...

class Value𝓣BasicVector_𝓣Expression𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.BasicVector_TExpressionU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.BasicVector_TExpressionU: ...
    def get_value(self) -> pydrake.systems.framework.BasicVector_TExpressionU: ...
    @overload
    def set_value(self, arg0: pydrake.systems.framework.BasicVector_TExpressionU) -> None: ...
    @overload
    def set_value(self, value: pydrake.symbolic.Expression) -> None: ...
    @overload
    def set_value(self, value: numpy.ndarray[object[m, 1]]) -> None: ...

class Value𝓣BasicVector𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.BasicVector) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.BasicVector: ...
    def get_value(self) -> pydrake.systems.framework.BasicVector: ...
    @overload
    def set_value(self, arg0: pydrake.systems.framework.BasicVector) -> None: ...
    @overload
    def set_value(self, value: float) -> None: ...
    @overload
    def set_value(self, value: numpy.ndarray[numpy.float64[m, 1]]) -> None: ...

class Value𝓣BodyIndex𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.tree.BodyIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.tree.BodyIndex: ...
    def get_value(self) -> pydrake.multibody.tree.BodyIndex: ...
    def set_value(self, arg0: pydrake.multibody.tree.BodyIndex) -> None: ...

class Value𝓣CSpaceSeparatingPlane_𝓣Variable𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.optimization.CSpaceSeparatingPlane_TVariableU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.optimization.CSpaceSeparatingPlane_TVariableU: ...
    def get_value(self) -> pydrake.geometry.optimization.CSpaceSeparatingPlane_TVariableU: ...
    def set_value(self, arg0: pydrake.geometry.optimization.CSpaceSeparatingPlane_TVariableU) -> None: ...

class Value𝓣CSpaceSeparatingPlane𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.optimization.CSpaceSeparatingPlane) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.optimization.CSpaceSeparatingPlane: ...
    def get_value(self) -> pydrake.geometry.optimization.CSpaceSeparatingPlane: ...
    def set_value(self, arg0: pydrake.geometry.optimization.CSpaceSeparatingPlane) -> None: ...

class Value𝓣CacheIndex𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.CacheIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.CacheIndex: ...
    def get_value(self) -> pydrake.systems.framework.CacheIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.CacheIndex) -> None: ...

class Value𝓣ClarabelSolverDetails𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.ClarabelSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.ClarabelSolverDetails: ...
    def get_value(self) -> pydrake.solvers.ClarabelSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.ClarabelSolverDetails) -> None: ...

class Value𝓣ClpSolverDetails𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.ClpSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.ClpSolverDetails: ...
    def get_value(self) -> pydrake.solvers.ClpSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.ClpSolverDetails) -> None: ...

class Value𝓣ContactResults_𝓣AutoDiffXd𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.ContactResults_TAutoDiffXdU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.ContactResults_TAutoDiffXdU: ...
    def get_value(self) -> pydrake.multibody.plant.ContactResults_TAutoDiffXdU: ...
    def set_value(self, arg0: pydrake.multibody.plant.ContactResults_TAutoDiffXdU) -> None: ...

class Value𝓣ContactResults_𝓣Expression𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.ContactResults_TExpressionU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.ContactResults_TExpressionU: ...
    def get_value(self) -> pydrake.multibody.plant.ContactResults_TExpressionU: ...
    def set_value(self, arg0: pydrake.multibody.plant.ContactResults_TExpressionU) -> None: ...

class Value𝓣ContactResults𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.ContactResults) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.ContactResults: ...
    def get_value(self) -> pydrake.multibody.plant.ContactResults: ...
    def set_value(self, arg0: pydrake.multibody.plant.ContactResults) -> None: ...

class Value𝓣ContactWrench𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.optimization.ContactWrench) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.optimization.ContactWrench: ...
    def get_value(self) -> pydrake.multibody.optimization.ContactWrench: ...
    def set_value(self, arg0: pydrake.multibody.optimization.ContactWrench) -> None: ...

class Value𝓣ContinuousStateIndex𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.ContinuousStateIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.ContinuousStateIndex: ...
    def get_value(self) -> pydrake.systems.framework.ContinuousStateIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.ContinuousStateIndex) -> None: ...

class Value𝓣CoulombFriction_𝓣AutoDiffXd𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.CoulombFriction_TAutoDiffXdU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.CoulombFriction_TAutoDiffXdU: ...
    def get_value(self) -> pydrake.multibody.plant.CoulombFriction_TAutoDiffXdU: ...
    def set_value(self, arg0: pydrake.multibody.plant.CoulombFriction_TAutoDiffXdU) -> None: ...

class Value𝓣CoulombFriction_𝓣Expression𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.CoulombFriction_TExpressionU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.CoulombFriction_TExpressionU: ...
    def get_value(self) -> pydrake.multibody.plant.CoulombFriction_TExpressionU: ...
    def set_value(self, arg0: pydrake.multibody.plant.CoulombFriction_TExpressionU) -> None: ...

class Value𝓣CoulombFriction𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.CoulombFriction) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.CoulombFriction: ...
    def get_value(self) -> pydrake.multibody.plant.CoulombFriction: ...
    def set_value(self, arg0: pydrake.multibody.plant.CoulombFriction) -> None: ...

class Value𝓣CsdpSolverDetails𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.CsdpSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.CsdpSolverDetails: ...
    def get_value(self) -> pydrake.solvers.CsdpSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.CsdpSolverDetails) -> None: ...

class Value𝓣DependencyTicket𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.DependencyTicket) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.DependencyTicket: ...
    def get_value(self) -> pydrake.systems.framework.DependencyTicket: ...
    def set_value(self, arg0: pydrake.systems.framework.DependencyTicket) -> None: ...

class Value𝓣DiscreteStateIndex𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.DiscreteStateIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.DiscreteStateIndex: ...
    def get_value(self) -> pydrake.systems.framework.DiscreteStateIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.DiscreteStateIndex) -> None: ...

class Value𝓣ExternallyAppliedSpatialForce_𝓣AutoDiffXd𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.ExternallyAppliedSpatialForce_TAutoDiffXdU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.ExternallyAppliedSpatialForce_TAutoDiffXdU: ...
    def get_value(self) -> pydrake.multibody.plant.ExternallyAppliedSpatialForce_TAutoDiffXdU: ...
    def set_value(self, arg0: pydrake.multibody.plant.ExternallyAppliedSpatialForce_TAutoDiffXdU) -> None: ...

class Value𝓣ExternallyAppliedSpatialForce_𝓣Expression𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.ExternallyAppliedSpatialForce_TExpressionU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.ExternallyAppliedSpatialForce_TExpressionU: ...
    def get_value(self) -> pydrake.multibody.plant.ExternallyAppliedSpatialForce_TExpressionU: ...
    def set_value(self, arg0: pydrake.multibody.plant.ExternallyAppliedSpatialForce_TExpressionU) -> None: ...

class Value𝓣ExternallyAppliedSpatialForce𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.ExternallyAppliedSpatialForce) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.ExternallyAppliedSpatialForce: ...
    def get_value(self) -> pydrake.multibody.plant.ExternallyAppliedSpatialForce: ...
    def set_value(self, arg0: pydrake.multibody.plant.ExternallyAppliedSpatialForce) -> None: ...

class Value𝓣ForceElementIndex𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.tree.ForceElementIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.tree.ForceElementIndex: ...
    def get_value(self) -> pydrake.multibody.tree.ForceElementIndex: ...
    def set_value(self, arg0: pydrake.multibody.tree.ForceElementIndex) -> None: ...

class Value𝓣FrameIndex𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.tree.FrameIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.tree.FrameIndex: ...
    def get_value(self) -> pydrake.multibody.tree.FrameIndex: ...
    def set_value(self, arg0: pydrake.multibody.tree.FrameIndex) -> None: ...

class Value𝓣FramePoseVector_𝓣AutoDiffXd𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.FramePoseVector_TAutoDiffXdU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.FramePoseVector_TAutoDiffXdU: ...
    def get_value(self) -> pydrake.geometry.FramePoseVector_TAutoDiffXdU: ...
    def set_value(self, arg0: pydrake.geometry.FramePoseVector_TAutoDiffXdU) -> None: ...

class Value𝓣FramePoseVector_𝓣Expression𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.FramePoseVector_TExpressionU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.FramePoseVector_TExpressionU: ...
    def get_value(self) -> pydrake.geometry.FramePoseVector_TExpressionU: ...
    def set_value(self, arg0: pydrake.geometry.FramePoseVector_TExpressionU) -> None: ...

class Value𝓣FramePoseVector𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.FramePoseVector) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.FramePoseVector: ...
    def get_value(self) -> pydrake.geometry.FramePoseVector: ...
    def set_value(self, arg0: pydrake.geometry.FramePoseVector) -> None: ...

class Value𝓣GurobiSolverDetails𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.GurobiSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.GurobiSolverDetails: ...
    def get_value(self) -> pydrake.solvers.GurobiSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.GurobiSolverDetails) -> None: ...

class Value𝓣HydroelasticContactInfo_𝓣AutoDiffXd𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.HydroelasticContactInfo_TAutoDiffXdU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.HydroelasticContactInfo_TAutoDiffXdU: ...
    def get_value(self) -> pydrake.multibody.plant.HydroelasticContactInfo_TAutoDiffXdU: ...
    def set_value(self, arg0: pydrake.multibody.plant.HydroelasticContactInfo_TAutoDiffXdU) -> None: ...

class Value𝓣HydroelasticContactInfo_𝓣Expression𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.HydroelasticContactInfo_TExpressionU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.HydroelasticContactInfo_TExpressionU: ...
    def get_value(self) -> pydrake.multibody.plant.HydroelasticContactInfo_TExpressionU: ...
    def set_value(self, arg0: pydrake.multibody.plant.HydroelasticContactInfo_TExpressionU) -> None: ...

class Value𝓣HydroelasticContactInfo𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.plant.HydroelasticContactInfo) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.plant.HydroelasticContactInfo: ...
    def get_value(self) -> pydrake.multibody.plant.HydroelasticContactInfo: ...
    def set_value(self, arg0: pydrake.multibody.plant.HydroelasticContactInfo) -> None: ...

class Value𝓣Image𝓣PixelType𝓹kBgr8U𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.sensors.ImageTPixelTypepkBgr8UU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.sensors.ImageTPixelTypepkBgr8UU: ...
    def get_value(self) -> pydrake.systems.sensors.ImageTPixelTypepkBgr8UU: ...
    def set_value(self, arg0: pydrake.systems.sensors.ImageTPixelTypepkBgr8UU) -> None: ...

class Value𝓣Image𝓣PixelType𝓹kBgra8U𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.sensors.ImageTPixelTypepkBgra8UU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.sensors.ImageTPixelTypepkBgra8UU: ...
    def get_value(self) -> pydrake.systems.sensors.ImageTPixelTypepkBgra8UU: ...
    def set_value(self, arg0: pydrake.systems.sensors.ImageTPixelTypepkBgra8UU) -> None: ...

class Value𝓣Image𝓣PixelType𝓹kDepth16U𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.sensors.ImageTPixelTypepkDepth16UU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.sensors.ImageTPixelTypepkDepth16UU: ...
    def get_value(self) -> pydrake.systems.sensors.ImageTPixelTypepkDepth16UU: ...
    def set_value(self, arg0: pydrake.systems.sensors.ImageTPixelTypepkDepth16UU) -> None: ...

class Value𝓣Image𝓣PixelType𝓹kDepth32F𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.sensors.ImageTPixelTypepkDepth32FU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.sensors.ImageTPixelTypepkDepth32FU: ...
    def get_value(self) -> pydrake.systems.sensors.ImageTPixelTypepkDepth32FU: ...
    def set_value(self, arg0: pydrake.systems.sensors.ImageTPixelTypepkDepth32FU) -> None: ...

class Value𝓣Image𝓣PixelType𝓹kGrey8U𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.sensors.ImageTPixelTypepkGrey8UU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.sensors.ImageTPixelTypepkGrey8UU: ...
    def get_value(self) -> pydrake.systems.sensors.ImageTPixelTypepkGrey8UU: ...
    def set_value(self, arg0: pydrake.systems.sensors.ImageTPixelTypepkGrey8UU) -> None: ...

class Value𝓣Image𝓣PixelType𝓹kLabel16I𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.sensors.ImageTPixelTypepkLabel16IU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.sensors.ImageTPixelTypepkLabel16IU: ...
    def get_value(self) -> pydrake.systems.sensors.ImageTPixelTypepkLabel16IU: ...
    def set_value(self, arg0: pydrake.systems.sensors.ImageTPixelTypepkLabel16IU) -> None: ...

class Value𝓣Image𝓣PixelType𝓹kRgb8U𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.sensors.ImageTPixelTypepkRgb8UU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.sensors.ImageTPixelTypepkRgb8UU: ...
    def get_value(self) -> pydrake.systems.sensors.ImageTPixelTypepkRgb8UU: ...
    def set_value(self, arg0: pydrake.systems.sensors.ImageTPixelTypepkRgb8UU) -> None: ...

class Value𝓣Image𝓣PixelType𝓹kRgba8U𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.sensors.ImageTPixelTypepkRgba8UU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.sensors.ImageTPixelTypepkRgba8UU: ...
    def get_value(self) -> pydrake.systems.sensors.ImageTPixelTypepkRgba8UU: ...
    def set_value(self, arg0: pydrake.systems.sensors.ImageTPixelTypepkRgba8UU) -> None: ...

class Value𝓣InputPortIndex𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.InputPortIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.InputPortIndex: ...
    def get_value(self) -> pydrake.systems.framework.InputPortIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.InputPortIndex) -> None: ...

class Value𝓣IpoptSolverDetails𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.IpoptSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.IpoptSolverDetails: ...
    def get_value(self) -> pydrake.solvers.IpoptSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.IpoptSolverDetails) -> None: ...

class Value𝓣Isometry3_𝓣AutoDiffXd𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.common.eigen_geometry.Isometry3_TAutoDiffXdU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.common.eigen_geometry.Isometry3_TAutoDiffXdU: ...
    def get_value(self) -> pydrake.common.eigen_geometry.Isometry3_TAutoDiffXdU: ...
    def set_value(self, arg0: pydrake.common.eigen_geometry.Isometry3_TAutoDiffXdU) -> None: ...

class Value𝓣Isometry3_𝓣Expression𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.common.eigen_geometry.Isometry3_TExpressionU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.common.eigen_geometry.Isometry3_TExpressionU: ...
    def get_value(self) -> pydrake.common.eigen_geometry.Isometry3_TExpressionU: ...
    def set_value(self, arg0: pydrake.common.eigen_geometry.Isometry3_TExpressionU) -> None: ...

class Value𝓣Isometry3𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.common.eigen_geometry.Isometry3) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.common.eigen_geometry.Isometry3: ...
    def get_value(self) -> pydrake.common.eigen_geometry.Isometry3: ...
    def set_value(self, arg0: pydrake.common.eigen_geometry.Isometry3) -> None: ...

class Value𝓣JointActuatorIndex𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.tree.JointActuatorIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.tree.JointActuatorIndex: ...
    def get_value(self) -> pydrake.multibody.tree.JointActuatorIndex: ...
    def set_value(self, arg0: pydrake.multibody.tree.JointActuatorIndex) -> None: ...

class Value𝓣JointIndex𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.tree.JointIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.tree.JointIndex: ...
    def get_value(self) -> pydrake.multibody.tree.JointIndex: ...
    def set_value(self, arg0: pydrake.multibody.tree.JointIndex) -> None: ...

class Value𝓣ModelInstanceIndex𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.tree.ModelInstanceIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.tree.ModelInstanceIndex: ...
    def get_value(self) -> pydrake.multibody.tree.ModelInstanceIndex: ...
    def set_value(self, arg0: pydrake.multibody.tree.ModelInstanceIndex) -> None: ...

class Value𝓣MosekSolverDetails𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.MosekSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.MosekSolverDetails: ...
    def get_value(self) -> pydrake.solvers.MosekSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.MosekSolverDetails) -> None: ...

class Value𝓣NloptSolverDetails𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.NloptSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.NloptSolverDetails: ...
    def get_value(self) -> pydrake.solvers.NloptSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.NloptSolverDetails) -> None: ...

class Value𝓣NumericParameterIndex𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.NumericParameterIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.NumericParameterIndex: ...
    def get_value(self) -> pydrake.systems.framework.NumericParameterIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.NumericParameterIndex) -> None: ...

class Value𝓣OsqpSolverDetails𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.OsqpSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.OsqpSolverDetails: ...
    def get_value(self) -> pydrake.solvers.OsqpSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.OsqpSolverDetails) -> None: ...

class Value𝓣OutputPortIndex𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.OutputPortIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.OutputPortIndex: ...
    def get_value(self) -> pydrake.systems.framework.OutputPortIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.OutputPortIndex) -> None: ...

class Value𝓣PointCloud𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.perception.PointCloud) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.perception.PointCloud: ...
    def get_value(self) -> pydrake.perception.PointCloud: ...
    def set_value(self, arg0: pydrake.perception.PointCloud) -> None: ...

class Value𝓣QueryObject_𝓣AutoDiffXd𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.QueryObject_TAutoDiffXdU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.QueryObject_TAutoDiffXdU: ...
    def get_value(self) -> pydrake.geometry.QueryObject_TAutoDiffXdU: ...
    def set_value(self, arg0: pydrake.geometry.QueryObject_TAutoDiffXdU) -> None: ...

class Value𝓣QueryObject_𝓣Expression𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.QueryObject_TExpressionU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.QueryObject_TExpressionU: ...
    def get_value(self) -> pydrake.geometry.QueryObject_TExpressionU: ...
    def set_value(self, arg0: pydrake.geometry.QueryObject_TExpressionU) -> None: ...

class Value𝓣QueryObject𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.QueryObject) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.QueryObject: ...
    def get_value(self) -> pydrake.geometry.QueryObject: ...
    def set_value(self, arg0: pydrake.geometry.QueryObject) -> None: ...

class Value𝓣RenderLabel𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.RenderLabel) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.RenderLabel: ...
    def get_value(self) -> pydrake.geometry.RenderLabel: ...
    def set_value(self, arg0: pydrake.geometry.RenderLabel) -> None: ...

class Value𝓣Rgba𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.geometry.Rgba) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.geometry.Rgba: ...
    def get_value(self) -> pydrake.geometry.Rgba: ...
    def set_value(self, arg0: pydrake.geometry.Rgba) -> None: ...

class Value𝓣RigidTransform_𝓣AutoDiffXd𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.math.RigidTransform_TAutoDiffXdU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.math.RigidTransform_TAutoDiffXdU: ...
    def get_value(self) -> pydrake.math.RigidTransform_TAutoDiffXdU: ...
    def set_value(self, arg0: pydrake.math.RigidTransform_TAutoDiffXdU) -> None: ...

class Value𝓣RigidTransform_𝓣Expression𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.math.RigidTransform_TExpressionU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.math.RigidTransform_TExpressionU: ...
    def get_value(self) -> pydrake.math.RigidTransform_TExpressionU: ...
    def set_value(self, arg0: pydrake.math.RigidTransform_TExpressionU) -> None: ...

class Value𝓣RigidTransform𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.math.RigidTransform) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.math.RigidTransform: ...
    def get_value(self) -> pydrake.math.RigidTransform: ...
    def set_value(self, arg0: pydrake.math.RigidTransform) -> None: ...

class Value𝓣RotationMatrix_𝓣AutoDiffXd𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.math.RotationMatrix_TAutoDiffXdU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.math.RotationMatrix_TAutoDiffXdU: ...
    def get_value(self) -> pydrake.math.RotationMatrix_TAutoDiffXdU: ...
    def set_value(self, arg0: pydrake.math.RotationMatrix_TAutoDiffXdU) -> None: ...

class Value𝓣RotationMatrix_𝓣Expression𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.math.RotationMatrix_TExpressionU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.math.RotationMatrix_TExpressionU: ...
    def get_value(self) -> pydrake.math.RotationMatrix_TExpressionU: ...
    def set_value(self, arg0: pydrake.math.RotationMatrix_TExpressionU) -> None: ...

class Value𝓣RotationMatrix𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.math.RotationMatrix) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.math.RotationMatrix: ...
    def get_value(self) -> pydrake.math.RotationMatrix: ...
    def set_value(self, arg0: pydrake.math.RotationMatrix) -> None: ...

class Value𝓣ScsSolverDetails𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.ScsSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.ScsSolverDetails: ...
    def get_value(self) -> pydrake.solvers.ScsSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.ScsSolverDetails) -> None: ...

class Value𝓣SnoptSolverDetails𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.solvers.SnoptSolverDetails) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.solvers.SnoptSolverDetails: ...
    def get_value(self) -> pydrake.solvers.SnoptSolverDetails: ...
    def set_value(self, arg0: pydrake.solvers.SnoptSolverDetails) -> None: ...

class Value𝓣SpatialAcceleration_𝓣AutoDiffXd𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialAcceleration_TAutoDiffXdU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialAcceleration_TAutoDiffXdU: ...
    def get_value(self) -> pydrake.multibody.math.SpatialAcceleration_TAutoDiffXdU: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialAcceleration_TAutoDiffXdU) -> None: ...

class Value𝓣SpatialAcceleration_𝓣Expression𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialAcceleration_TExpressionU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialAcceleration_TExpressionU: ...
    def get_value(self) -> pydrake.multibody.math.SpatialAcceleration_TExpressionU: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialAcceleration_TExpressionU) -> None: ...

class Value𝓣SpatialAcceleration𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialAcceleration) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialAcceleration: ...
    def get_value(self) -> pydrake.multibody.math.SpatialAcceleration: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialAcceleration) -> None: ...

class Value𝓣SpatialForce_𝓣AutoDiffXd𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialForce_TAutoDiffXdU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialForce_TAutoDiffXdU: ...
    def get_value(self) -> pydrake.multibody.math.SpatialForce_TAutoDiffXdU: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialForce_TAutoDiffXdU) -> None: ...

class Value𝓣SpatialForce_𝓣Expression𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialForce_TExpressionU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialForce_TExpressionU: ...
    def get_value(self) -> pydrake.multibody.math.SpatialForce_TExpressionU: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialForce_TExpressionU) -> None: ...

class Value𝓣SpatialForce𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialForce) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialForce: ...
    def get_value(self) -> pydrake.multibody.math.SpatialForce: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialForce) -> None: ...

class Value𝓣SpatialMomentum_𝓣AutoDiffXd𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialMomentum_TAutoDiffXdU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialMomentum_TAutoDiffXdU: ...
    def get_value(self) -> pydrake.multibody.math.SpatialMomentum_TAutoDiffXdU: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialMomentum_TAutoDiffXdU) -> None: ...

class Value𝓣SpatialMomentum_𝓣Expression𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialMomentum_TExpressionU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialMomentum_TExpressionU: ...
    def get_value(self) -> pydrake.multibody.math.SpatialMomentum_TExpressionU: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialMomentum_TExpressionU) -> None: ...

class Value𝓣SpatialMomentum𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialMomentum) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialMomentum: ...
    def get_value(self) -> pydrake.multibody.math.SpatialMomentum: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialMomentum) -> None: ...

class Value𝓣SpatialVelocity_𝓣AutoDiffXd𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialVelocity_TAutoDiffXdU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialVelocity_TAutoDiffXdU: ...
    def get_value(self) -> pydrake.multibody.math.SpatialVelocity_TAutoDiffXdU: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialVelocity_TAutoDiffXdU) -> None: ...

class Value𝓣SpatialVelocity_𝓣Expression𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialVelocity_TExpressionU) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialVelocity_TExpressionU: ...
    def get_value(self) -> pydrake.multibody.math.SpatialVelocity_TExpressionU: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialVelocity_TExpressionU) -> None: ...

class Value𝓣SpatialVelocity𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.multibody.math.SpatialVelocity) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.multibody.math.SpatialVelocity: ...
    def get_value(self) -> pydrake.multibody.math.SpatialVelocity: ...
    def set_value(self, arg0: pydrake.multibody.math.SpatialVelocity) -> None: ...

class Value𝓣SubsystemIndex𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: pydrake.systems.framework.SubsystemIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> pydrake.systems.framework.SubsystemIndex: ...
    def get_value(self) -> pydrake.systems.framework.SubsystemIndex: ...
    def set_value(self, arg0: pydrake.systems.framework.SubsystemIndex) -> None: ...

class Value𝓣bool𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: bool) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> bool: ...
    def set_value(self, arg0: bool) -> None: ...

class Value𝓣float𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: float) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> float: ...
    def set_value(self, arg0: float) -> None: ...

class Value𝓣list𝓣ExternallyAppliedSpatialForce_𝓣AutoDiffXd𝓤𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.plant.ExternallyAppliedSpatialForce_TAutoDiffXdU]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.plant.ExternallyAppliedSpatialForce_TAutoDiffXdU]: ...
    def set_value(self, arg0: List[pydrake.multibody.plant.ExternallyAppliedSpatialForce_TAutoDiffXdU]) -> None: ...

class Value𝓣list𝓣ExternallyAppliedSpatialForce_𝓣Expression𝓤𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.plant.ExternallyAppliedSpatialForce_TExpressionU]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.plant.ExternallyAppliedSpatialForce_TExpressionU]: ...
    def set_value(self, arg0: List[pydrake.multibody.plant.ExternallyAppliedSpatialForce_TExpressionU]) -> None: ...

class Value𝓣list𝓣ExternallyAppliedSpatialForce𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.plant.ExternallyAppliedSpatialForce]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.plant.ExternallyAppliedSpatialForce]: ...
    def set_value(self, arg0: List[pydrake.multibody.plant.ExternallyAppliedSpatialForce]) -> None: ...

class Value𝓣list𝓣RigidTransform_𝓣AutoDiffXd𝓤𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.math.RigidTransform_TAutoDiffXdU]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.math.RigidTransform_TAutoDiffXdU]: ...
    def set_value(self, arg0: List[pydrake.math.RigidTransform_TAutoDiffXdU]) -> None: ...

class Value𝓣list𝓣RigidTransform_𝓣Expression𝓤𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.math.RigidTransform_TExpressionU]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.math.RigidTransform_TExpressionU]: ...
    def set_value(self, arg0: List[pydrake.math.RigidTransform_TExpressionU]) -> None: ...

class Value𝓣list𝓣RigidTransform𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.math.RigidTransform]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.math.RigidTransform]: ...
    def set_value(self, arg0: List[pydrake.math.RigidTransform]) -> None: ...

class Value𝓣list𝓣RotationMatrix_𝓣AutoDiffXd𝓤𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.math.RotationMatrix_TAutoDiffXdU]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.math.RotationMatrix_TAutoDiffXdU]: ...
    def set_value(self, arg0: List[pydrake.math.RotationMatrix_TAutoDiffXdU]) -> None: ...

class Value𝓣list𝓣RotationMatrix_𝓣Expression𝓤𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.math.RotationMatrix_TExpressionU]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.math.RotationMatrix_TExpressionU]: ...
    def set_value(self, arg0: List[pydrake.math.RotationMatrix_TExpressionU]) -> None: ...

class Value𝓣list𝓣RotationMatrix𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.math.RotationMatrix]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.math.RotationMatrix]: ...
    def set_value(self, arg0: List[pydrake.math.RotationMatrix]) -> None: ...

class Value𝓣list𝓣SpatialAcceleration_𝓣AutoDiffXd𝓤𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialAcceleration_TAutoDiffXdU]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialAcceleration_TAutoDiffXdU]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialAcceleration_TAutoDiffXdU]) -> None: ...

class Value𝓣list𝓣SpatialAcceleration_𝓣Expression𝓤𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialAcceleration_TExpressionU]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialAcceleration_TExpressionU]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialAcceleration_TExpressionU]) -> None: ...

class Value𝓣list𝓣SpatialAcceleration𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialAcceleration]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialAcceleration]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialAcceleration]) -> None: ...

class Value𝓣list𝓣SpatialForce_𝓣AutoDiffXd𝓤𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialForce_TAutoDiffXdU]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialForce_TAutoDiffXdU]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialForce_TAutoDiffXdU]) -> None: ...

class Value𝓣list𝓣SpatialForce_𝓣Expression𝓤𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialForce_TExpressionU]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialForce_TExpressionU]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialForce_TExpressionU]) -> None: ...

class Value𝓣list𝓣SpatialForce𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialForce]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialForce]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialForce]) -> None: ...

class Value𝓣list𝓣SpatialMomentum_𝓣AutoDiffXd𝓤𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialMomentum_TAutoDiffXdU]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialMomentum_TAutoDiffXdU]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialMomentum_TAutoDiffXdU]) -> None: ...

class Value𝓣list𝓣SpatialMomentum_𝓣Expression𝓤𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialMomentum_TExpressionU]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialMomentum_TExpressionU]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialMomentum_TExpressionU]) -> None: ...

class Value𝓣list𝓣SpatialMomentum𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialMomentum]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialMomentum]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialMomentum]) -> None: ...

class Value𝓣list𝓣SpatialVelocity_𝓣AutoDiffXd𝓤𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialVelocity_TAutoDiffXdU]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialVelocity_TAutoDiffXdU]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialVelocity_TAutoDiffXdU]) -> None: ...

class Value𝓣list𝓣SpatialVelocity_𝓣Expression𝓤𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialVelocity_TExpressionU]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialVelocity_TExpressionU]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialVelocity_TExpressionU]) -> None: ...

class Value𝓣list𝓣SpatialVelocity𝓤𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: List[pydrake.multibody.math.SpatialVelocity]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> List[pydrake.multibody.math.SpatialVelocity]: ...
    def set_value(self, arg0: List[pydrake.multibody.math.SpatialVelocity]) -> None: ...

class Value𝓣object𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: object) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> object: ...
    def get_value(self) -> object: ...
    def set_value(self, arg0: object) -> None: ...

class Value𝓣str𝓤(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> str: ...
    def set_value(self, arg0: str) -> None: ...

class _TemporaryName_N5drake5ValueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> str: ...
    def set_value(self, arg0: str) -> None: ...

class _TemporaryName_N5drake5ValueIbEE(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: bool) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> bool: ...
    def set_value(self, arg0: bool) -> None: ...

class _TemporaryName_N5drake5ValueIdEE(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: float) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> None: ...
    def get_value(self) -> float: ...
    def set_value(self, arg0: float) -> None: ...

class _TemporaryName_N5drake7pydrake8internal12_GLOBAL__N_113PyObjectValueE(AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: object) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> object: ...
    def get_value(self) -> object: ...
    def set_value(self, arg0: object) -> None: ...
