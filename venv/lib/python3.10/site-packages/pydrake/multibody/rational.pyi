import numpy
import pydrake.multibody.plant
import pydrake.symbolic
from pydrake.common.cpp_template import RationalForwardKinematicsPose_ as RationalForwardKinematicsPose_
from typing import ClassVar, overload

class RationalForwardKinematics:
    def __init__(self, plant: pydrake.multibody.plant.MultibodyPlant) -> None: ...
    def CalcBodyPoseAsMultilinearPolynomial(self, *args, **kwargs): ...
    @overload
    def ComputeQValue(self, s_val: numpy.ndarray[numpy.float64[m, 1]], q_star_val: numpy.ndarray[numpy.float64[m, 1]]) -> numpy.ndarray[numpy.float64[m, 1]]: ...
    @overload
    def ComputeQValue(self, s_val: numpy.ndarray[object[m, 1]], q_star_val: numpy.ndarray[numpy.float64[m, 1]]) -> numpy.ndarray[object[m, 1]]: ...
    @overload
    def ComputeQValue(self, s_val: numpy.ndarray[object[m, 1]], q_star_val: numpy.ndarray[numpy.float64[m, 1]]) -> numpy.ndarray[object[m, 1]]: ...
    @overload
    def ComputeSValue(self, q_val: numpy.ndarray[numpy.float64[m, 1]], q_star_val: numpy.ndarray[numpy.float64[m, 1]], angles_wrap_to_inf: bool = ...) -> numpy.ndarray[numpy.float64[m, 1]]: ...
    @overload
    def ComputeSValue(self, q_val: numpy.ndarray[object[m, 1]], q_star_val: numpy.ndarray[numpy.float64[m, 1]]) -> numpy.ndarray[object[m, 1]]: ...
    @overload
    def ComputeSValue(self, q_val: numpy.ndarray[object[m, 1]], q_star_val: numpy.ndarray[numpy.float64[m, 1]]) -> numpy.ndarray[object[m, 1]]: ...
    def ConvertMultilinearPolynomialToRationalFunction(self, e: pydrake.symbolic.Polynomial) -> pydrake.symbolic.RationalFunction: ...
    def plant(self) -> pydrake.multibody.plant.MultibodyPlant: ...
    def s(self) -> numpy.ndarray[object[m, 1]]: ...

class RationalForwardKinematicsPose:
    def __init__(self, *args, **kwargs) -> None: ...
    def position(self) -> numpy.ndarray[object[3, 1]]: ...
    def rotation(self) -> numpy.ndarray[object[3, 3]]: ...
    def __copy__(self) -> RationalForwardKinematicsPose: ...
    def __deepcopy__(self, arg0: dict) -> RationalForwardKinematicsPose: ...

class RationalForwardKinematicsPose_𝓣RationalFunction𝓤:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def position(self) -> numpy.ndarray[object[3, 1]]: ...
    def rotation(self) -> numpy.ndarray[object[3, 3]]: ...
    def __copy__(self) -> RationalForwardKinematicsPose_TRationalFunctionU: ...
    def __deepcopy__(self, arg0: dict) -> RationalForwardKinematicsPose_TRationalFunctionU: ...

class _TemporaryName_N5drake9multibody25RationalForwardKinematics4PoseINS_8symbolic16RationalFunctionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def position(self) -> numpy.ndarray[object[3, 1]]: ...
    def rotation(self) -> numpy.ndarray[object[3, 3]]: ...
    def __copy__(self) -> RationalForwardKinematicsPose_TRationalFunctionU: ...
    def __deepcopy__(self, arg0: dict) -> RationalForwardKinematicsPose_TRationalFunctionU: ...
