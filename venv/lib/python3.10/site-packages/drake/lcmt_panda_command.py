"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lcmt_panda_command(object):
    __slots__ = ["utime", "num_joint_position", "joint_position", "num_joint_velocity", "joint_velocity", "num_joint_torque", "joint_torque", "control_mode_expected"]

    __typenames__ = ["int64_t", "int32_t", "double", "int32_t", "double", "int32_t", "double", "int8_t"]

    __dimensions__ = [None, None, ["num_joint_position"], None, ["num_joint_velocity"], None, ["num_joint_torque"], None]

    def __init__(self):
        self.utime = 0
        self.num_joint_position = 0
        self.joint_position = []
        self.num_joint_velocity = 0
        self.joint_velocity = []
        self.num_joint_torque = 0
        self.joint_torque = []
        self.control_mode_expected = 0

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_panda_command._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.num_joint_position))
        buf.write(struct.pack('>%dd' % self.num_joint_position, *self.joint_position[:self.num_joint_position]))
        buf.write(struct.pack(">i", self.num_joint_velocity))
        buf.write(struct.pack('>%dd' % self.num_joint_velocity, *self.joint_velocity[:self.num_joint_velocity]))
        buf.write(struct.pack(">i", self.num_joint_torque))
        buf.write(struct.pack('>%dd' % self.num_joint_torque, *self.joint_torque[:self.num_joint_torque]))
        buf.write(struct.pack(">b", self.control_mode_expected))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_panda_command._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_panda_command._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_panda_command()
        self.utime, self.num_joint_position = struct.unpack(">qi", buf.read(12))
        self.joint_position = struct.unpack('>%dd' % self.num_joint_position, buf.read(self.num_joint_position * 8))
        self.num_joint_velocity = struct.unpack(">i", buf.read(4))[0]
        self.joint_velocity = struct.unpack('>%dd' % self.num_joint_velocity, buf.read(self.num_joint_velocity * 8))
        self.num_joint_torque = struct.unpack(">i", buf.read(4))[0]
        self.joint_torque = struct.unpack('>%dd' % self.num_joint_torque, buf.read(self.num_joint_torque * 8))
        self.control_mode_expected = struct.unpack(">b", buf.read(1))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if lcmt_panda_command in parents: return 0
        tmphash = (0x7346fbbb8026ace8) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_panda_command._packed_fingerprint is None:
            lcmt_panda_command._packed_fingerprint = struct.pack(">Q", lcmt_panda_command._get_hash_recursive([]))
        return lcmt_panda_command._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", lcmt_panda_command._get_packed_fingerprint())[0]

