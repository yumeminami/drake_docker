"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import drake.experimental_lcmt_deformable_tri_mesh_init

class experimental_lcmt_deformable_tri_meshes_init(object):
    __slots__ = ["num_meshes", "meshes"]

    __typenames__ = ["int32_t", "drake.experimental_lcmt_deformable_tri_mesh_init"]

    __dimensions__ = [None, ["num_meshes"]]

    def __init__(self):
        self.num_meshes = 0
        self.meshes = []

    def encode(self):
        buf = BytesIO()
        buf.write(experimental_lcmt_deformable_tri_meshes_init._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.num_meshes))
        for i0 in range(self.num_meshes):
            assert self.meshes[i0]._get_packed_fingerprint() == drake.experimental_lcmt_deformable_tri_mesh_init._get_packed_fingerprint()
            self.meshes[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != experimental_lcmt_deformable_tri_meshes_init._get_packed_fingerprint():
            raise ValueError("Decode error")
        return experimental_lcmt_deformable_tri_meshes_init._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = experimental_lcmt_deformable_tri_meshes_init()
        self.num_meshes = struct.unpack(">i", buf.read(4))[0]
        self.meshes = []
        for i0 in range(self.num_meshes):
            self.meshes.append(drake.experimental_lcmt_deformable_tri_mesh_init._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if experimental_lcmt_deformable_tri_meshes_init in parents: return 0
        newparents = parents + [experimental_lcmt_deformable_tri_meshes_init]
        tmphash = (0x50fb454fd7993225+ drake.experimental_lcmt_deformable_tri_mesh_init._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if experimental_lcmt_deformable_tri_meshes_init._packed_fingerprint is None:
            experimental_lcmt_deformable_tri_meshes_init._packed_fingerprint = struct.pack(">Q", experimental_lcmt_deformable_tri_meshes_init._get_hash_recursive([]))
        return experimental_lcmt_deformable_tri_meshes_init._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", experimental_lcmt_deformable_tri_meshes_init._get_packed_fingerprint())[0]

