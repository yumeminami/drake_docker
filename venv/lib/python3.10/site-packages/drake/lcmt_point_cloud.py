"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import drake.lcmt_point_cloud_field

class lcmt_point_cloud(object):
    __slots__ = ["utime", "frame_name", "width", "height", "num_fields", "fields", "flags", "point_step", "row_step", "filler_size", "filler", "data_size", "data"]

    __typenames__ = ["int64_t", "string", "int64_t", "int64_t", "int32_t", "drake.lcmt_point_cloud_field", "int64_t", "int32_t", "int64_t", "int16_t", "byte", "int64_t", "byte"]

    __dimensions__ = [None, None, None, None, None, ["num_fields"], None, None, None, None, ["filler_size"], None, ["data_size"]]

    IS_BIGENDIAN = 1
    IS_STRICTLY_FINITE = 2

    def __init__(self):
        self.utime = 0
        self.frame_name = ""
        self.width = 0
        self.height = 0
        self.num_fields = 0
        self.fields = []
        self.flags = 0
        self.point_step = 0
        self.row_step = 0
        self.filler_size = 0
        self.filler = b""
        self.data_size = 0
        self.data = b""

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_point_cloud._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        __frame_name_encoded = self.frame_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__frame_name_encoded)+1))
        buf.write(__frame_name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">qqi", self.width, self.height, self.num_fields))
        for i0 in range(self.num_fields):
            assert self.fields[i0]._get_packed_fingerprint() == drake.lcmt_point_cloud_field._get_packed_fingerprint()
            self.fields[i0]._encode_one(buf)
        buf.write(struct.pack(">qiqh", self.flags, self.point_step, self.row_step, self.filler_size))
        buf.write(bytearray(self.filler[:self.filler_size]))
        buf.write(struct.pack(">q", self.data_size))
        buf.write(bytearray(self.data[:self.data_size]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_point_cloud._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_point_cloud._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_point_cloud()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        __frame_name_len = struct.unpack('>I', buf.read(4))[0]
        self.frame_name = buf.read(__frame_name_len)[:-1].decode('utf-8', 'replace')
        self.width, self.height, self.num_fields = struct.unpack(">qqi", buf.read(20))
        self.fields = []
        for i0 in range(self.num_fields):
            self.fields.append(drake.lcmt_point_cloud_field._decode_one(buf))
        self.flags, self.point_step, self.row_step, self.filler_size = struct.unpack(">qiqh", buf.read(22))
        self.filler = buf.read(self.filler_size)
        self.data_size = struct.unpack(">q", buf.read(8))[0]
        self.data = buf.read(self.data_size)
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if lcmt_point_cloud in parents: return 0
        newparents = parents + [lcmt_point_cloud]
        tmphash = (0xb996d33b5fb6120b+ drake.lcmt_point_cloud_field._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_point_cloud._packed_fingerprint is None:
            lcmt_point_cloud._packed_fingerprint = struct.pack(">Q", lcmt_point_cloud._get_hash_recursive([]))
        return lcmt_point_cloud._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", lcmt_point_cloud._get_packed_fingerprint())[0]

